{"version":3,"sources":["components/QRCode.tsx","components/Sketch.tsx","components/Easel.tsx","components/FlexContainer.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["QRCode","url","label","value","Sketch","style","height","textAlign","backgroundColor","Easel","FlexBox","children","flex","overflow","FlexContainer","direction","display","flexDirection","map","child","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OAQe,SAASA,EAAT,GAAqD,IAAnCC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MACpC,OACE,6BACE,6BACE,kBAAC,IAAD,CAAcC,MAAOF,KAEvB,6BACE,+BAAQC,KCbD,SAASE,IACtB,OACE,yBACEC,MAAO,CACLC,OAAQ,OACRC,UAAW,SACXC,gBAAiB,YAJrB,mECFW,SAASC,IACtB,OACE,yBACEJ,MAAO,CACLG,gBAAiB,UACjBF,OAAQ,OACRC,UAAW,WAJf,yGCEJ,SAASG,EAAT,GAA2D,IAAxCC,EAAuC,EAAvCA,SAMjB,OAAO,yBAAKN,MALiB,CAC3BO,KAAM,OACNC,SAAU,SAGeF,GAQd,SAASG,EAAT,GAGsB,IAFnCC,EAEkC,EAFlCA,UACAJ,EACkC,EADlCA,SAEMN,EAAuB,CAC3BW,QAAS,OACTC,cAAeF,GAAa,SAC5BT,OAAQ,QAGV,OACE,yBAAKD,MAAOA,GACTM,EAASO,KAAI,SAACC,GAAD,OACZ,kBAACT,EAAD,KAAUS,OCzBlBC,QAAQC,IAAQ,EAAG,GAuBJC,MArBf,WACE,OACE,kBAACR,EAAD,CAAeC,UAAU,OACvB,kBAACD,EAAD,KACE,kBAACV,EAAD,MACA,kBAACU,EAAD,CAAeC,UAAU,OACvB,kBAACf,EAAD,CACEE,MAAM,SACND,IAAI,gEAEN,kBAACD,EAAD,CACEE,MAAM,SACND,IAAI,kEAIV,kBAACQ,EAAD,QCdcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.d97aca3e.chunk.js","sourcesContent":["import React from 'react';\nimport NativeQRCode from 'qrcode.react';\n\ninterface Props {\n  url: string;\n  label: string;\n}\n\nexport default function QRCode({ url, label }: Props): JSX.Element {\n  return (\n    <div>\n      <div>\n        <NativeQRCode value={url} />\n      </div>\n      <div>\n        <label>{label}</label>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Sketch(): JSX.Element {\n  return (\n    <div\n      style={{\n        height: '100%',\n        textAlign: 'center',\n        backgroundColor: '#57CCD3'\n      }}\n    >\n      색칠된 그림 조각들 표시\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Easel(): JSX.Element {\n  return (\n    <div\n      style={{\n        backgroundColor: '#F06886',\n        height: '100%',\n        textAlign: 'center'\n      }}\n    >\n      현재 칠하고 있는 타일들이 보이는 영역\n    </div>\n  );\n}\n","import React, { CSSProperties } from 'react';\n\ninterface FlexBoxProps {\n  children: JSX.Element | JSX.Element[];\n}\n\nfunction FlexBox({ children }: FlexBoxProps): JSX.Element {\n  const style: CSSProperties = {\n    flex: 'auto',\n    overflow: 'auto'\n  };\n\n  return <div style={style}>{children}</div>;\n}\n\ninterface FlexContainerProps {\n  direction?: CSSProperties['flexDirection'];\n  children: JSX.Element[];\n}\n\nexport default function FlexContainer({\n  direction,\n  children\n}: FlexContainerProps): JSX.Element {\n  const style: CSSProperties = {\n    display: 'flex',\n    flexDirection: direction || 'column',\n    height: '100%'\n  };\n\n  return (\n    <div style={style}>\n      {children.map((child) => (\n        <FlexBox>{child}</FlexBox>\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { sum } from '@package/sample';\nimport QRCode from './QRCode';\nimport Sketch from './Sketch';\nimport Easel from './Easel';\nimport FlexContainer from './FlexContainer';\n\nconsole.log(sum(1, 2));\n\nfunction App(): JSX.Element {\n  return (\n    <FlexContainer direction=\"row\">\n      <FlexContainer>\n        <Sketch />\n        <FlexContainer direction=\"row\">\n          <QRCode\n            label=\"Canvas\"\n            url=\"https://hollysparty.github.io/everybody777-frontend/canvas/\"\n          />\n          <QRCode\n            label=\"Museum\"\n            url=\"https://hollysparty.github.io/everybody777-frontend/screen/\"\n          />\n        </FlexContainer>\n      </FlexContainer>\n      <Easel />\n    </FlexContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}